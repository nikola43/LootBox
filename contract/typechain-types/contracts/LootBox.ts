/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LootBox {
  export type BoxStruct = {
    id: BytesLike;
    boxType: BigNumberish;
    status: BigNumberish;
    boxTier: BigNumberish;
    owner: AddressLike;
    prizeToken: AddressLike;
    prizeAmount: BigNumberish;
  };

  export type BoxStructOutput = [
    id: string,
    boxType: bigint,
    status: bigint,
    boxTier: bigint,
    owner: string,
    prizeToken: string,
    prizeAmount: bigint
  ] & {
    id: string;
    boxType: bigint;
    status: bigint;
    boxTier: bigint;
    owner: string;
    prizeToken: string;
    prizeAmount: bigint;
  };
}

export interface LootBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "boxes"
      | "createBox"
      | "deleteBox"
      | "freeBoxWinRate"
      | "fulfillRandomWords"
      | "getBox"
      | "getBoxIdAt"
      | "initialize"
      | "oracles"
      | "owner"
      | "paidBoxWinRate"
      | "pendingRequests"
      | "recoverERC20"
      | "recoverEth"
      | "renounceOwnership"
      | "requestRandomWords"
      | "setOracle"
      | "setWinRate"
      | "totalBoxes"
      | "transferOwnership"
      | "updateBox"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoxCreated"
      | "BoxDeleted"
      | "BoxOpened"
      | "BoxUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "RandomWordsFulfilled"
      | "RandomWordsRequested"
      | "Refunded"
      | "UpdateOracle"
      | "UpdateWinRate"
      | "UserLost"
      | "UserWon"
  ): EventFragment;

  encodeFunctionData(functionFragment: "boxes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createBox",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteBox",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freeBoxWinRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWords",
    values: [BytesLike, BigNumberish[], BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getBox", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBoxIdAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidBoxWinRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWinRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBoxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBox",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "boxes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeBoxWinRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoxIdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidBoxWinRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWinRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalBoxes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateBox", data: BytesLike): Result;
}

export namespace BoxCreatedEvent {
  export type InputTuple = [
    boxId: BytesLike,
    boxType: BigNumberish,
    status: BigNumberish,
    boxTier: BigNumberish,
    owner: AddressLike,
    prizeToken: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    boxId: string,
    boxType: bigint,
    status: bigint,
    boxTier: bigint,
    owner: string,
    prizeToken: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    boxId: string;
    boxType: bigint;
    status: bigint;
    boxTier: bigint;
    owner: string;
    prizeToken: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoxDeletedEvent {
  export type InputTuple = [boxId: BytesLike];
  export type OutputTuple = [boxId: string];
  export interface OutputObject {
    boxId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoxOpenedEvent {
  export type InputTuple = [boxId: BytesLike, owner: AddressLike];
  export type OutputTuple = [boxId: string, owner: string];
  export interface OutputObject {
    boxId: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoxUpdatedEvent {
  export type InputTuple = [
    boxId: BytesLike,
    boxType: BigNumberish,
    boxTier: BigNumberish,
    prizeToken: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    boxId: string,
    boxType: bigint,
    boxTier: bigint,
    prizeToken: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    boxId: string;
    boxType: bigint;
    boxTier: bigint;
    prizeToken: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomWordsFulfilledEvent {
  export type InputTuple = [
    requestId: BytesLike,
    randomWords: BigNumberish[],
    boxId: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    randomWords: bigint[],
    boxId: string
  ];
  export interface OutputObject {
    requestId: string;
    randomWords: bigint[];
    boxId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomWordsRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    requester: AddressLike,
    numberOfWords: BigNumberish,
    boxId: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    requester: string,
    numberOfWords: bigint,
    boxId: string
  ];
  export interface OutputObject {
    requestId: string;
    requester: string;
    numberOfWords: bigint;
    boxId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    boxId: BytesLike,
    prizeToken: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    boxId: string,
    prizeToken: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    boxId: string;
    prizeToken: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateOracleEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateWinRateEvent {
  export type InputTuple = [
    newRate: BigNumberish,
    oldRate: BigNumberish,
    boxType: BigNumberish
  ];
  export type OutputTuple = [newRate: bigint, oldRate: bigint, boxType: bigint];
  export interface OutputObject {
    newRate: bigint;
    oldRate: bigint;
    boxType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserLostEvent {
  export type InputTuple = [boxId: BytesLike, loser: AddressLike];
  export type OutputTuple = [boxId: string, loser: string];
  export interface OutputObject {
    boxId: string;
    loser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWonEvent {
  export type InputTuple = [
    boxId: BytesLike,
    winner: AddressLike,
    prizeToken: AddressLike,
    prizeAmount: BigNumberish
  ];
  export type OutputTuple = [
    boxId: string,
    winner: string,
    prizeToken: string,
    prizeAmount: bigint
  ];
  export interface OutputObject {
    boxId: string;
    winner: string;
    prizeToken: string;
    prizeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LootBox extends BaseContract {
  connect(runner?: ContractRunner | null): LootBox;
  waitForDeployment(): Promise<this>;

  interface: LootBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  boxes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, string, bigint] & {
        id: string;
        boxType: bigint;
        status: bigint;
        boxTier: bigint;
        owner: string;
        prizeToken: string;
        prizeAmount: bigint;
      }
    ],
    "view"
  >;

  createBox: TypedContractMethod<
    [
      boxType: BigNumberish,
      boxTier: BigNumberish,
      prizeToken: AddressLike,
      prizeAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  deleteBox: TypedContractMethod<[boxId: BytesLike], [void], "nonpayable">;

  freeBoxWinRate: TypedContractMethod<[], [bigint], "view">;

  fulfillRandomWords: TypedContractMethod<
    [
      requestId: BytesLike,
      _randomWords: BigNumberish[],
      boxId: BytesLike,
      requester: AddressLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getBox: TypedContractMethod<
    [boxId: BytesLike],
    [LootBox.BoxStructOutput],
    "view"
  >;

  getBoxIdAt: TypedContractMethod<[index: BigNumberish], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  oracles: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paidBoxWinRate: TypedContractMethod<[], [bigint], "view">;

  pendingRequests: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  recoverERC20: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  recoverEth: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestRandomWords: TypedContractMethod<
    [numberOfWords: BigNumberish, boxId: BytesLike],
    [string],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<
    [newOracle: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setWinRate: TypedContractMethod<
    [_newRate: BigNumberish, boxType: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalBoxes: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBox: TypedContractMethod<
    [
      boxId: BytesLike,
      boxType: BigNumberish,
      boxTier: BigNumberish,
      prizeToken: AddressLike,
      prizeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "boxes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, string, bigint] & {
        id: string;
        boxType: bigint;
        status: bigint;
        boxTier: bigint;
        owner: string;
        prizeToken: string;
        prizeAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBox"
  ): TypedContractMethod<
    [
      boxType: BigNumberish,
      boxTier: BigNumberish,
      prizeToken: AddressLike,
      prizeAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deleteBox"
  ): TypedContractMethod<[boxId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freeBoxWinRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fulfillRandomWords"
  ): TypedContractMethod<
    [
      requestId: BytesLike,
      _randomWords: BigNumberish[],
      boxId: BytesLike,
      requester: AddressLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBox"
  ): TypedContractMethod<[boxId: BytesLike], [LootBox.BoxStructOutput], "view">;
  getFunction(
    nameOrSignature: "getBoxIdAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "oracles"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paidBoxWinRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingRequests"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverEth"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<
    [numberOfWords: BigNumberish, boxId: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<
    [newOracle: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWinRate"
  ): TypedContractMethod<
    [_newRate: BigNumberish, boxType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBoxes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBox"
  ): TypedContractMethod<
    [
      boxId: BytesLike,
      boxType: BigNumberish,
      boxTier: BigNumberish,
      prizeToken: AddressLike,
      prizeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BoxCreated"
  ): TypedContractEvent<
    BoxCreatedEvent.InputTuple,
    BoxCreatedEvent.OutputTuple,
    BoxCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BoxDeleted"
  ): TypedContractEvent<
    BoxDeletedEvent.InputTuple,
    BoxDeletedEvent.OutputTuple,
    BoxDeletedEvent.OutputObject
  >;
  getEvent(
    key: "BoxOpened"
  ): TypedContractEvent<
    BoxOpenedEvent.InputTuple,
    BoxOpenedEvent.OutputTuple,
    BoxOpenedEvent.OutputObject
  >;
  getEvent(
    key: "BoxUpdated"
  ): TypedContractEvent<
    BoxUpdatedEvent.InputTuple,
    BoxUpdatedEvent.OutputTuple,
    BoxUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RandomWordsFulfilled"
  ): TypedContractEvent<
    RandomWordsFulfilledEvent.InputTuple,
    RandomWordsFulfilledEvent.OutputTuple,
    RandomWordsFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomWordsRequested"
  ): TypedContractEvent<
    RandomWordsRequestedEvent.InputTuple,
    RandomWordsRequestedEvent.OutputTuple,
    RandomWordsRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateOracle"
  ): TypedContractEvent<
    UpdateOracleEvent.InputTuple,
    UpdateOracleEvent.OutputTuple,
    UpdateOracleEvent.OutputObject
  >;
  getEvent(
    key: "UpdateWinRate"
  ): TypedContractEvent<
    UpdateWinRateEvent.InputTuple,
    UpdateWinRateEvent.OutputTuple,
    UpdateWinRateEvent.OutputObject
  >;
  getEvent(
    key: "UserLost"
  ): TypedContractEvent<
    UserLostEvent.InputTuple,
    UserLostEvent.OutputTuple,
    UserLostEvent.OutputObject
  >;
  getEvent(
    key: "UserWon"
  ): TypedContractEvent<
    UserWonEvent.InputTuple,
    UserWonEvent.OutputTuple,
    UserWonEvent.OutputObject
  >;

  filters: {
    "BoxCreated(bytes32,uint8,uint8,uint8,address,address,uint256)": TypedContractEvent<
      BoxCreatedEvent.InputTuple,
      BoxCreatedEvent.OutputTuple,
      BoxCreatedEvent.OutputObject
    >;
    BoxCreated: TypedContractEvent<
      BoxCreatedEvent.InputTuple,
      BoxCreatedEvent.OutputTuple,
      BoxCreatedEvent.OutputObject
    >;

    "BoxDeleted(bytes32)": TypedContractEvent<
      BoxDeletedEvent.InputTuple,
      BoxDeletedEvent.OutputTuple,
      BoxDeletedEvent.OutputObject
    >;
    BoxDeleted: TypedContractEvent<
      BoxDeletedEvent.InputTuple,
      BoxDeletedEvent.OutputTuple,
      BoxDeletedEvent.OutputObject
    >;

    "BoxOpened(bytes32,address)": TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;
    BoxOpened: TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;

    "BoxUpdated(bytes32,uint8,uint8,address,uint256)": TypedContractEvent<
      BoxUpdatedEvent.InputTuple,
      BoxUpdatedEvent.OutputTuple,
      BoxUpdatedEvent.OutputObject
    >;
    BoxUpdated: TypedContractEvent<
      BoxUpdatedEvent.InputTuple,
      BoxUpdatedEvent.OutputTuple,
      BoxUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RandomWordsFulfilled(bytes32,uint256[],bytes32)": TypedContractEvent<
      RandomWordsFulfilledEvent.InputTuple,
      RandomWordsFulfilledEvent.OutputTuple,
      RandomWordsFulfilledEvent.OutputObject
    >;
    RandomWordsFulfilled: TypedContractEvent<
      RandomWordsFulfilledEvent.InputTuple,
      RandomWordsFulfilledEvent.OutputTuple,
      RandomWordsFulfilledEvent.OutputObject
    >;

    "RandomWordsRequested(bytes32,address,uint256,bytes32)": TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;
    RandomWordsRequested: TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;

    "Refunded(bytes32,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "UpdateOracle(address,address)": TypedContractEvent<
      UpdateOracleEvent.InputTuple,
      UpdateOracleEvent.OutputTuple,
      UpdateOracleEvent.OutputObject
    >;
    UpdateOracle: TypedContractEvent<
      UpdateOracleEvent.InputTuple,
      UpdateOracleEvent.OutputTuple,
      UpdateOracleEvent.OutputObject
    >;

    "UpdateWinRate(uint256,uint256,uint8)": TypedContractEvent<
      UpdateWinRateEvent.InputTuple,
      UpdateWinRateEvent.OutputTuple,
      UpdateWinRateEvent.OutputObject
    >;
    UpdateWinRate: TypedContractEvent<
      UpdateWinRateEvent.InputTuple,
      UpdateWinRateEvent.OutputTuple,
      UpdateWinRateEvent.OutputObject
    >;

    "UserLost(bytes32,address)": TypedContractEvent<
      UserLostEvent.InputTuple,
      UserLostEvent.OutputTuple,
      UserLostEvent.OutputObject
    >;
    UserLost: TypedContractEvent<
      UserLostEvent.InputTuple,
      UserLostEvent.OutputTuple,
      UserLostEvent.OutputObject
    >;

    "UserWon(bytes32,address,address,uint256)": TypedContractEvent<
      UserWonEvent.InputTuple,
      UserWonEvent.OutputTuple,
      UserWonEvent.OutputObject
    >;
    UserWon: TypedContractEvent<
      UserWonEvent.InputTuple,
      UserWonEvent.OutputTuple,
      UserWonEvent.OutputObject
    >;
  };
}
